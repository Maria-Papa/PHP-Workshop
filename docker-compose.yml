services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    user: "${UID}:${GID}"
    container_name: laravel-app
    restart: unless-stopped
    working_dir: /var/www/html
    volumes:
      - ./src:/var/www/html
    env_file:
      - .env.docker
    depends_on:
      redis:
        condition: service_started
      mongo:
        condition: service_started
      postgres:
        condition: service_healthy
    networks:
      - laravel
    healthcheck:
      test: ["CMD", "php", "-r", "echo 'OK';"]
      interval: 10s
      timeout: 5s
      retries: 3

  nginx:
    image: nginx:alpine
    container_name: laravel-nginx
    restart: unless-stopped
    ports:
      - 80:80
    volumes:
      - ./src:/var/www/html
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - app
    networks:
      - laravel

  redis:
    image: redis:8.0.1-alpine
    container_name: laravel-redis
    restart: always
    ports:
      - 6379:6379
    volumes:
      - redis_data:/data
    # environment:
    #   ALLOW_EMPTY_PASSWORD: ${ALLOW_EMPTY_PASSWORD:-no}
    #   REDIS_PASSWORD: ${REDIS_PASSWORD:-secret}
    #   REDIS_DISABLE_COMMANDS: ${REDIS_DISABLE_COMMANDS:-FLUSHDB,FLUSHALL}
    networks:
      - laravel

  mongo:
    image: mongo:7.0-jammy
    container_name: laravel-mongo
    volumes:
      - mongo_data:/data/db
    networks:
      - laravel

  postgres:
    image: postgres:15-alpine
    container_name: laravel-postgres
    restart: always
    ports:
      - 5432:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-laravel}
      POSTGRES_USER: ${POSTGRES_USER:-laravel}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secret}
    networks:
      - laravel
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER"]
      interval: 5s
      timeout: 5s
      retries: 5


volumes:
  mongo_data:
  postgres_data:
  redis_data:

networks:
  laravel:
    driver: bridge